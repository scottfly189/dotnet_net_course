1
00:00:01,240 --> 00:00:05,500
欢迎来到深入理解DotNET平台通讯实战课

2
00:00:06,060 --> 00:00:10,480
本课程是人工智能与微服务开发的网络基础课程

3
00:00:12,370 --> 00:00:15,940
前面我们详细讲解了SSE的前端开发

4
00:00:16,440 --> 00:00:19,380
最主要介绍了EventSource对象的使用

5
00:00:19,400 --> 00:00:25,080
现在让我们更详细的探索一下SSE后端的最佳实践

6
00:00:29,750 --> 00:00:33,720
首先,我们已经知道SSE是一种通讯机制

7
00:00:35,860 --> 00:00:46,160
也就是：客户端发起一次请求，
服务端可以多次的向客户端推送消息,并且仅限于服务端向客户端单向推送消息机制

8
00:00:51,720 --> 00:00:59,720
当客户端向服务端发起一个请求的时候，服务端需要按照SSE的约定设置响应头

9
00:01:00,320 --> 00:01:08,320
在服务端，我们还要想办法在没有数据的时候进行阻塞，有数据的时候才发送给客户端

10
00:01:10,780 --> 00:01:18,780
只有这样，我们才能保证是同一个HTTP连接,不致于连接结束

11
00:01:22,880 --> 00:01:31,080
所以我们的思路是：第一：建立一个Web API的控制器，用它来处理客户端的第一次请求

12
00:01:32,340 --> 00:01:38,260
并且我们按照SSE的约定返回相应的响应头

13
00:01:39,080 --> 00:01:46,580
第二:为了提高性能,我们使用单例的Channel类来处理有数据时的流式输出

14
00:01:46,740 --> 00:01:51,160
并且也实现没有数据时候的HTTP阻塞操作

15
00:01:51,640 --> 00:02:02,080
第三:使用一个多线程安全的字典，为每个用户ID建立一个Channel，有数据才发送到Channel中

16
00:02:02,140 --> 00:02:05,480
我们也通过这种方式来进行客户区分

17
00:02:07,410 --> 00:02:14,000
那么，来吧，让我们进行SSE后端的代码实操

18
00:02:14,120 --> 00:02:16,280
介绍一下接下来的工作

19
00:02:16,360 --> 00:02:24,060
第一个：我们会按照SSE的约定返回HTTP响应头

20
00:02:24,820 --> 00:02:29,220
第二个:我们在后端也会进行SSE的鉴权

21
00:02:29,820 --> 00:02:34,920
第三个:我们在后端也会进行用户ID的识别

22
00:02:37,300 --> 00:02:45,300
第四个:我们在后端给前端发送心跳消息,以保持最新连接

23
00:02:46,140 --> 00:02:53,300
第五个：在前端页面进行刷新或者关闭时，我们后端实现退出SSE服务

24
00:02:53,840 --> 00:03:10,380
第六个:前面我们知道，SSE是一个客户端请求，
服务端可以多次的发送消息给客户端,所以没有消息的时候如何实现阻塞?所以我们使用了Channel类来实现这一点

25
00:03:11,140 --> 00:03:14,300
好吧，让我们开始代码实操

26
00:03:14,600 --> 00:03:17,040
首先

27
00:03:20,760 --> 00:03:25,410
在这里，我们上节课已经建好了SSE的客户端

28
00:03:27,250 --> 00:03:32,350
现在我们只需要在之前的基础上建一个SSE服务端

29
00:03:50,300 --> 00:03:58,300
我们用.NET Web API的脚手架建立了一个空白的Web API项目

30
00:04:06,190 --> 00:04:10,970
我们可以看到：上面目录是SSE的客户端

31
00:04:11,330 --> 00:04:14,750
下面目录是SSE的服务端

32
00:04:18,170 --> 00:04:23,610
首先，我们要先加上一个Web API的控制器

33
00:04:42,720 --> 00:04:47,760
然后，我们需要安装Swagger的.NET包

34
00:04:50,890 --> 00:04:52,540
让我们打开终端

35
00:05:02,280 --> 00:05:06,100
现在我们安装Swagger的.NET包

36
00:05:11,645 --> 00:05:13,550
现在我们已经安装好

37
00:05:14,250 --> 00:05:19,670
然后在代码中启用Swagger

38
00:06:06,760 --> 00:06:17,780
上节课也讲解了，我们服务端必须实现客户端的跨域请求,让我们在代码中加上跨域的代码

39
00:06:31,870 --> 00:06:39,870
我们现在在DotNet依赖注入容器中加好了允许客户端的跨域代码

40
00:06:40,070 --> 00:06:46,010
注入这个CORS服务后,让我们启用它

41
00:06:57,390 --> 00:07:04,370
因为策略名称是Allow All Origins,让我们把它复制下来

42
00:07:06,365 --> 00:07:08,620
现在我们已经启用了跨源

43
00:07:08,720 --> 00:07:16,480
下一步，我们按照刚才讲的步骤，我们需要新建一个控制器

44
00:07:19,040 --> 00:07:20,720
我们建一个目录

45
00:07:24,185 --> 00:07:27,780
我们再建一个文件

46
00:07:43,680 --> 00:07:45,320
我们新建一个类

47
00:08:31,660 --> 00:08:38,740
让我们新建一个控制器服务的Action方法

48
00:08:58,970 --> 00:09:02,610
我们先看一下客户端代码

49
00:09:06,270 --> 00:09:16,120
大家看这里，因为我们前端代码是把token放在路径里面，并且把用户ID放Query里面

50
00:09:17,380 --> 00:09:20,080
所以我们的方法要接收一下

51
00:09:31,140 --> 00:09:35,820
我们在Http Get这里设置一个占位符

52
00:09:35,940 --> 00:09:39,260
然后在参数列表中就可以接收了

53
00:09:58,780 --> 00:10:12,480
这里有一个地方需要注意，当客户端关闭或者刷新，
我们需要一个机制知道客户端发生什么，所以我们使用CancellationToken类

54
00:10:15,240 --> 00:10:23,240
这个CancellationToken类是.NET框架感知客户端变化的解决方案

55
00:10:24,600 --> 00:10:33,800
如果客户端被刷新或者关闭，.NET框架会修改这个CancellationToken对象的值

56
00:10:43,630 --> 00:10:48,700
然后按照前面讲的，我们再实现客户端的鉴权的代码

57
00:11:03,595 --> 00:11:09,520
在这里，我们可以实现JWT鉴权或者Cookie的鉴权

58
00:11:13,640 --> 00:11:21,640
因为我们的客户端会通过URL把token与用户ID发送至服务端

59
00:11:40,150 --> 00:11:48,800
因为在客户端我们把token的获取做了简化操作,所以我们后端也相应检验一下

60
00:12:30,040 --> 00:12:38,940
在服务端这里，我们只是简单演示鉴权，一个真实的场景需要我们从JWT中读出token数据

61
00:12:39,640 --> 00:12:46,120
然后才对Token进行校验，我们这里仅是演示，不做过多代码操作

62
00:12:53,740 --> 00:13:01,740
在这里，我们只实现了一个Token验证的简单演示,实际场景会复杂一些

63
00:13:09,360 --> 00:13:17,360
然后，我们再按SSE的要求通过服务端返回相应的响应头

64
00:13:21,210 --> 00:13:23,680
我们从这里复制一下

65
00:13:28,020 --> 00:13:30,140
这段代码我解释一下

66
00:13:30,340 --> 00:13:58,480
这里根据我们前面所学的知识，
我们一定要把Content-Type响应头设置为Text-Event-Stream,然后也要把Connection设置为keep-alive

67
00:13:59,200 --> 00:14:04,040
另外这个响应头也建议加上，最主要针对Nginx

68
00:14:07,480 --> 00:14:20,960
那么，现在我们不但完成了SSE的客户端鉴权

69
00:14:27,520 --> 00:14:37,020
也实现了正确的从服务端返回SSE响应头，
现在让我们来实现一下从服务端返回客户端的心跳消息

70
00:15:55,700 --> 00:16:03,120
这里的异常捕获代码块，我们加上如果客户端断开或者客户端刷新时的异常处理

71
00:16:30,040 --> 00:16:35,420
然后，在这里，我们完成一下服务端返回心跳的代码

72
00:16:36,870 --> 00:16:39,270
我们使用异步来实现心跳

73
00:17:16,540 --> 00:17:27,580
这里，先检测一下CancellationToken对象的状态,如果被取消则退出循环，
如果正常,则循环发送心跳

74
00:17:55,780 --> 00:18:03,780
这里加上注释

75
00:18:12,070 --> 00:18:25,070
大家注意，因为心跳是一个新的Event事件类型，
所以我们需要写一个Event加上一个与前端约定的类型，也就是heat beat

76
00:18:26,535 --> 00:18:36,450
有一个地方大家一定要注意，
在一行的末尾一定要写上一个换行符,因为SSE是检测换行符做为一行的结束

77
00:18:39,460 --> 00:18:48,660
我们再加一个Data消息，代表发送一个空的消息，
并且末尾需要加两个换行符表示整个消息的结束

78
00:18:48,780 --> 00:19:00,920
再次强调一下：整个消息结束，
我们必须在最后一行的末尾放两个换行符，代表整个消息的结束

79
00:19:11,170 --> 00:19:19,170
在这里是十秒发送一次心跳，我改成五秒发送一次心跳

80
00:19:31,820 --> 00:19:50,320
大家看这里：这里是一个循环，并且是一个无限循环，
只要客户端没有关闭或者重新刷新，那么它就是一个无限循环，从而一直向客户端发送心跳信息

81
00:19:59,020 --> 00:20:15,280
那么，下一步我们怎么做到：如果业务逻辑有内容就发送给SSE客户端，
如果没有内容就阻塞, 这样我们就需要用到Channel类了,让我们看一下

82
00:20:27,220 --> 00:20:40,820
首先Channel类是一个高效的，多线程安全的，
非常适合高并发场景的一个类,它是线程安全的，本质上是一个基于内存的一个消息队列

83
00:20:44,240 --> 00:20:52,240
它实现了一种发布-订阅模式，或者说生产者-消费者模式，也支持安全的异步读写

84
00:20:59,880 --> 00:21:09,280
非常适合在线程间异步通讯并且解耦模块，
是一种非常轻量级并内置的内存消息队列,让我们再往下看

85
00:21:15,280 --> 00:21:27,180
这里是Channel类的一个架构图，从这里看是一个内存队列，它可以是有界的，也可是无界的，这里我解释一下有界与无界

86
00:21:29,740 --> 00:21:42,640
如果是有界的话，那么这个消息队列有一个最大数量，如果写数据比读数据速度快，超出的消息或者被抛弃，或者处于等待状态

87
00:21:48,780 --> 00:22:01,780
如果是无界的，那么这个消息队列没有一个最大数量，如果写数据比读数据要快，则会一直写，直到填充完内存可提供的最大数量

88
00:22:08,780 --> 00:22:17,480
并且，在Channel类里，读与写都是有顺序的，
如果被读了就消失了，不允许再次被读取

89
00:22:17,600 --> 00:22:25,600
那么让我们用Channel类来实现一下功能,让我们新建一个目录

90
00:22:29,360 --> 00:22:38,640
不好意思，前面代码Controllers目录放错位置，我们把这个目录拉到Server目录

91
00:22:38,890 --> 00:22:41,540
我们再检查一下原来的代码

92
00:22:51,990 --> 00:22:56,850
现在，我们建一个新的目录叫Services

93
00:23:11,010 --> 00:23:18,960
我们再建一个文件叫做SSE-Channel-Service

94
00:23:24,660 --> 00:23:31,360
那么 我们开始建一个类叫SSE-Channel-Service类

95
00:23:43,620 --> 00:23:54,500
首先，我们新建一个字典，一个多线程安全的字典

96
00:24:28,925 --> 00:24:36,400
这个字典，
由一个用户ID及这个用户ID所绑定的Channel类来构成

97
00:24:54,530 --> 00:24:56,970
然后我们实现一个注册方法

98
00:25:02,050 --> 00:25:03,850
我写一下注释

99
00:25:34,430 --> 00:25:50,420
假如这个与用户ID绑定的Channel存在，则直接返回这个旧的Channel，意思是如果用户已经注册了这个Channel,则我们直接返回它

100
00:26:05,080 --> 00:26:17,780
如果没有就新建，我们不使用无界的方式， 因为不安全，
所以我们新建一个有界的Channel,根据业务规模设定最大的消息队列数量

101
00:26:46,320 --> 00:26:48,880
看这里，这里有几个属性

102
00:27:06,560 --> 00:27:17,460
这里的属性代表一种策略：当消息超过设定的最大数量时，新的消息是丢弃还是等待,在这里我们的策略是等待

103
00:27:23,980 --> 00:27:30,080
我们现在完成了注册功能，再实现一个反注册功能

104
00:27:40,370 --> 00:27:44,830
目的是可以移出这个用户ID的Channel

105
00:28:39,990 --> 00:28:48,690
我们现在完成了这个服务类，我们还需要在Program中的依赖注入容器中进行服务注册

106
00:29:03,600 --> 00:29:11,620
我们把它注册成单例Singleton的模式

107
00:29:13,540 --> 00:29:17,080
注册成功后我们就可以使用这个服务了

108
00:29:23,140 --> 00:29:27,520
我们在控制器中使用,我们使用构造器注入

109
00:29:41,410 --> 00:29:47,360
这是我们已经把这个服务注入进来，我们现在可以使用它

110
00:29:52,940 --> 00:30:03,740
使用单例模式可以使我们后端性能更高效，
占用内存更少,注入这个服务后，让我们在这里使用一下,也就是注册用户

111
00:30:09,920 --> 00:30:17,920
我们把这个用户ID传入到Register方法中进行注册

112
00:30:21,220 --> 00:30:26,100
我们就可以使用这个Channel对象的读取方法

113
00:30:27,080 --> 00:30:37,360
我们读取管道所有信息，如果没有数据，就阻塞在那里

114
00:30:38,180 --> 00:30:47,320
如果有的话，我们就读取管道信息，把数据发送到客户端,让我们再处理一下客户端异常的方法

115
00:31:11,660 --> 00:31:20,800
如果客户端被关闭或者被刷新，
服务器代码就会抛出异常，抛出的异常会被这里的catch捕获

116
00:31:21,755 --> 00:31:25,460
这样连接的后端服务就自动关闭并释放

117
00:31:28,080 --> 00:31:33,680
然后，让我们再这里加一个chat事件

118
00:31:42,040 --> 00:31:50,040
大家要注意：我新增的chat事件，在这一行的后面一定要加一个换行符

119
00:31:52,060 --> 00:32:00,060
然后，整条消息结束的时候，我们一定要在最后的消息体上加两个换行符

120
00:32:02,280 --> 00:32:12,770
好的,我们发送前端的SSE服务端基本上完成

121
00:32:13,150 --> 00:32:17,770
我们再根据服务端的地址改一下客户端的地址

122
00:32:37,910 --> 00:32:45,910
我们在前端代码再加上一个接收chat的事件，加好后我们可以测试一下

123
00:32:48,090 --> 00:33:00,263
我们先运行服务器端

124
00:33:02,487 --> 00:33:07,662
让我们再打开一个终端,然后开始运行一个新的客户端

125
00:33:26,286 --> 00:33:40,070
我先清一下控制台日志，大家看这里，
控制台日志正确的接收到服务端的心跳返回信息,我们刚才写的代码中，服务端的心跳能够正确的起作用了

126
00:33:50,940 --> 00:34:03,340
但是有一个问题，由于业务模块没有消息发过来，所以只有心跳的消息，并没有业务消息,所以Channel就阻塞在这里

127
00:34:03,400 --> 00:34:12,000
所以我们需要模拟一个业务模块发送消息的方法,就象真实的业务场景，
有需要才发送客户端

128
00:34:15,440 --> 00:34:17,420
我把服务端停止一下

129
00:34:21,590 --> 00:34:24,470
所以我还需要写一个业务方法

130
00:35:09,370 --> 00:35:17,370
这个方法是：模拟真实的业务逻辑，如果产生业务数据，则发送给客户端

131
00:35:21,780 --> 00:35:27,910
那么，我们还要建一个Input Model

132
00:35:41,100 --> 00:36:18,210
因为测试方法通过POST方式来发送，
所以我们需要这个Input Model,并且让我们加到请求参数中使用它

133
00:36:47,430 --> 00:36:55,130
我们首先要取到这个注入的单例Channel服务,并且使用它来发送SSE消息

134
00:36:56,580 --> 00:37:08,640
对了，我们的Channel服务还要实现一个方法,实现一个发送数据的方法，我们之前漏掉了,现在让我们补充上

135
00:37:38,230 --> 00:37:46,130
看这里，如果我们获取到用户ID的Channel,我们就用它来写入管道消息

136
00:37:47,810 --> 00:37:49,770
现在我们可以使用了

137
00:38:23,020 --> 00:38:31,020
我们再运行服务端，让我们再测试一下,我们通过Swagger访问一下

138
00:38:33,200 --> 00:38:46,900
大家看客户端这里，
看我鼠标点击的位置,在控制台这里,我先清一下日志,看这里，浏览器接收到新的心跳消息

139
00:38:46,980 --> 00:38:55,380
由于我们业务模块并没有消息发送过来，并没有产生业务消息，所以阻塞在这里

140
00:38:55,940 --> 00:39:00,440
让我们模拟发送数据,访问一下Swagger

141
00:39:04,770 --> 00:39:18,270
我们现在测试一下，点击try it out按钮，在下面的测试框中填入“你好世界”，
并且设置用户ID为1，我们发送一下，看一下客户端

142
00:39:31,880 --> 00:39:43,980
在客户端这里正确显示了"你好世界"，我修改一下message的值，
再次发送，再看一下客户端，正确接收到我们修改的值

143
00:39:50,540 --> 00:39:58,540
这样，我们就模拟了一个在真实的场景下向这个用户ID的管道发送SSE业务消息

144
00:40:09,200 --> 00:40:17,200
在这里,我重点讲一下使用SSE的时候所经常踩的“坑”，我先演示一下问题

145
00:40:42,100 --> 00:40:53,200
我们转到代码处，因为SSE以最后的换行符做为一行,如果发送的消息中也有换行符，没有处理好它会出现严重问题

146
00:40:54,140 --> 00:41:03,140
我先清掉控制台日志，我再点击发送按钮，
我发送的是"你好世界"，但是客户端只显示出"你好"

147
00:41:14,040 --> 00:41:25,440
后面的“你好”被截取掉了，这是因为SSE协议是通过一个换行符做为结尾，
如果消息体有换行符，后面的内容会被截取掉

148
00:41:28,480 --> 00:41:35,280
所以如果这个消息体也有一个换行符，在前端就会丢失换行符后面的内容

149
00:41:44,120 --> 00:41:52,420
看这里的“世界”两个字就丢失了，
那么我们应该怎么解决这个问题？我们有三种解决方案

150
00:41:53,280 --> 00:42:01,660
第一种方案，我们把返回值包装成Json对象返回客户端，客户端再解析出正确内容

151
00:42:06,480 --> 00:42:14,480
第二种方案，如果消息体有换行符，则把消息体拆成两条消息来发送客户端

152
00:42:15,160 --> 00:42:21,960
第三种方案，将换行符替换成一种特殊的字符串

153
00:42:23,680 --> 00:42:28,220
然后在前端把这个特殊字符串替换成换行符

154
00:42:29,020 --> 00:42:30,920
我给大家看一下,

155
00:42:38,440 --> 00:42:40,800
这个就是第三种解决方案

156
00:42:44,620 --> 00:42:52,620
就是,服务端在发送消息前，先将换行符替换成一种特殊的字符格式

157
00:43:01,040 --> 00:43:09,040
然后在前端，再用javascript的正则表达式将这个特殊字符串替换成换行符

158
00:43:10,440 --> 00:43:18,100
那么就可以了,这里的演示就是第三种解决方案

159
00:43:19,360 --> 00:43:27,240
在实际开发过程中,我们经常访问人工智能,而且大模型会通过SSE返回数据给我们

160
00:43:28,640 --> 00:43:36,260
有很多数据都是带有这种换行符格式的数据

161
00:43:39,825 --> 00:43:42,651
所以我们有三种方案来处理它

162
00:43:56,860 --> 00:44:09,460
好的，让我来总结一下SSE的最佳实践,前端的Token一般放在URL参数中，或者通过Cookie Session来实现鉴权

163
00:44:09,580 --> 00:44:14,200
因为Event Source是不能加上请求头

164
00:44:14,620 --> 00:44:20,820
所以我们只能将Token等放在URL参数上传递给服务端

165
00:44:21,240 --> 00:44:25,540
第二个，使用心跳机制来检测服务端是否可用

166
00:44:26,260 --> 00:44:33,120
而服务端使用CancellationToken来检测客户端是否异常

167
00:44:35,020 --> 00:44:44,140
第三个,我们客户端可以通过Query的参数来传递用户ID,以在服务器端区分不同的用户

168
00:44:48,220 --> 00:45:00,320
在服务端，我们可以使用Channel类来实现数据的高效读写，
并且如果没有数据，我们也能实现阻塞，不致于引起连接结束

169
00:45:07,960 --> 00:45:27,620
最后，客户端与服务端也应该有一些约定，如"BEGIN"告诉客户端传输开始，
"DONE"告诉客户端传输结束，这样就很方便客户端接收到这些标识位做一些其他的处理

170
00:45:31,670 --> 00:45:39,670
好的，时间过得很快，本节课结束！大家休息一下，我们马上进入下面的课程

